pipeline {
    agent any
    environment {
        APP_NAME = "todo-app"
        IMAGE_NAME = "knockedtower/todo-app"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    stages {
        stage('Build') {
            steps {
                echo "Building Docker image..."
                bat "docker build -t %IMAGE_NAME%:%IMAGE_TAG% ."
            }
        }

    stage('Test') {
        steps {
            echo "Installing dependencies..."
            bat "npm ci"
            echo "Running tests..."
            bat "npm test"
        }
    }

    stage('SonarQube Analysis') {
        steps {
            echo 'Running SonarQube analysis'
            withSonarQubeEnv('SonarCube') { // Must match the SonarQube server configured in Jenkins
                script {
                    def scannerHome = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    bat """
                    "${scannerHome}\\bin\\sonar-scanner.bat" ^
                        -Dsonar.projectKey=todo-app ^
                        -Dsonar.sources=.
                        """
                    }
                }
            }
        }

        stage('Security') {
            steps {
                bat 'C:\\Users\\abodi\\Downloads\\trivy_0.66.0_windows-64bit\\trivy.exe image --severity CRITICAL %IMAGE_NAME%:%IMAGE_TAG% || echo Security scan done'
            }
        }


        stage('Deploy') {
            steps {
                echo "Removing old container (if exists)..."
                bat "docker rm -f %APP_NAME% || echo 'No existing container'"
                echo "Deploying container..."
                bat "docker run -d -p 3000:3000 --name %APP_NAME% %IMAGE_NAME%:%IMAGE_TAG%"
            }
        }

        stage('Release') {
            steps {
                echo "Promoting image to production tag..."
                withCredentials([usernamePassword(credentialsId: 'DockerHub', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    bat 'docker login -u %DOCKER_USER% -p %DOCKER_PASS%'
                    bat 'docker tag %IMAGE_NAME%:%IMAGE_TAG% %IMAGE_NAME%:%IMAGE_TAG%'
                    bat 'docker push %IMAGE_NAME%:%IMAGE_TAG%'
                    bat 'docker tag %IMAGE_NAME%:%IMAGE_TAG% %IMAGE_NAME%:latest'
                    bat 'docker push %IMAGE_NAME%:latest'

                    bat "git tag v%BUILD_NUMBER%"
                    bat "git push origin v%BUILD_NUMBER%"
                }
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                echo 'Starting Datadog monitoring check...'
        
                withCredentials([string(credentialsId: 'DATADOG_API_KEY', variable: 'DD_API_KEY')]) {
        
                    // Remove old dd-agent container if it exists
                    bat "docker rm -f dd-agent || echo 'No existing dd-agent container'"
                    // Run Datadog agent
                    bat """
                    docker run -d --name dd-agent ^
                        -e DD_API_KEY=%DD_API_KEY% ^
                        -e DD_SITE=ap2.datadoghq.com ^
                        -v /var/run/docker.sock:/var/run/docker.sock:ro ^
                        gcr.io/datadoghq/agent:latest
                    """
        
                    // Wait 10 seconds
                    powershell "Start-Sleep -Seconds 10"
        
        
                    // Check agent logs for traces
                    bat 'docker logs dd-agent | findstr "Trace" || echo "No traces yet, check later"'
                }
            }
        }

    }

    post {
        always {
            echo "Pipeline finished. Clean up or send notifications here."
        }
        failure {
            echo "Pipeline failed! Notify the team."
        }
        success {
            echo "Pipeline succeeded!"
        }
    }
}
