pipeline {
    agent any
    environment {
        APP_NAME = "todo-app"
        IMAGE_NAME = "knockedtower/todo-app"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    stages {
        stage('Build') {
            steps {
                echo "Building Docker image..."
                bat "docker build -t %IMAGE_NAME%:%IMAGE_TAG% ."
            }
        }

        stage('Test') {
            steps {
                echo "Installing dependencies..."
                bat "npm ci"
                echo "Running tests..."
                bat "npm test"
            }
        }

        stage('Security') {
            steps {
                bat 'C:\\Users\\abodi\\Downloads\\trivy_0.66.0_windows-64bit\\trivy.exe image --severity CRITICAL %IMAGE_NAME%:%IMAGE_TAG% || echo Security scan done'
            }
        }


        stage('Deploy') {
            steps {
                echo "Removing old container (if exists)..."
                bat "docker rm -f %APP_NAME% || echo 'No existing container'"
                echo "Deploying container..."
                bat "docker run -d -p 3000:3000 --name %APP_NAME% %IMAGE_NAME%:%IMAGE_TAG%"
            }
        }

        stage('Release') {
            steps {
                echo "Release stage placeholder – promote image to production tag"
                // Example:
                // bat "docker tag %IMAGE_NAME%:%IMAGE_TAG% %IMAGE_NAME%:latest"
                // bat "docker push %IMAGE_NAME%:latest"
            }
        }

        stage('Monitoring') {
            steps {
                echo "Monitoring placeholder – integrate Prometheus, Grafana, or Docker health checks"
                // Example: check container status
                // bat "docker ps | findstr %APP_NAME%"
            }
        }
    }

    post {
        always {
            echo "Pipeline finished. Clean up or send notifications here."
        }
        failure {
            echo "Pipeline failed! Notify the team."
        }
        success {
            echo "Pipeline succeeded!"
        }
    }
}
