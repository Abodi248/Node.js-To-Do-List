pipeline {
    agent any
    environment {
        APP_NAME = "todo-app"
        IMAGE_NAME = "knockedtower/todo-app"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    stages {
        stage('Build') {
            steps {
                echo "Building Docker image..."
                bat "docker build -t %IMAGE_NAME%:%IMAGE_TAG% ."
            }
        }

    stage('Test') {
        steps {
            echo "Installing dependencies..."
            bat "npm ci"
            echo "Running tests..."
            bat "npm test"
        }
    }


        stage('Security') {
            steps {
                bat 'C:\\Users\\abodi\\Downloads\\trivy_0.66.0_windows-64bit\\trivy.exe image --severity CRITICAL %IMAGE_NAME%:%IMAGE_TAG% || echo Security scan done'
            }
        }


        stage('Deploy') {
            steps {
                echo "Removing old container (if exists)..."
                bat "docker rm -f %APP_NAME% || echo 'No existing container'"
                echo "Deploying container..."
                bat "docker run -d -p 3000:3000 --name %APP_NAME% %IMAGE_NAME%:%IMAGE_TAG%"
            }
        }

        stage('Release') {
            steps {
                echo "Promoting image to production tag..."
                withCredentials([usernamePassword(credentialsId: 'DockerHub', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    // Log in to Docker Hub
                    bat 'docker login -u %DOCKER_USER% -p %DOCKER_PASS%'
                    
                    // Tag the image for production
                    bat 'docker tag knockedtower/todo-app:%BUILD_NUMBER% knockedtower/todo-app:latest'
                    
                    // Push the tagged image
                    bat 'docker push knockedtower/todo-app:latest'
                }
            }
        }

stage('Monitoring') {
    steps {
        echo 'Checking container health...'

        bat """
        set retries=0
        set maxRetries=10
        set healthy=false

        :checkHealth
        for /F "tokens=*" %%i in ('docker inspect --format "{{.State.Health.Status}}" todo-app') do set STATUS=%%i
        echo Container status: %STATUS%
        if "%STATUS%"=="healthy" (
            set healthy=true
            goto end
        )

        set /a retries+=1
        if %retries% GEQ %maxRetries% (
            echo Container did not become healthy in time.
            exit 1
        )

        timeout /t 3 >nul
        goto checkHealth

        :end
        echo Container is healthy!
        """
    }
}


    }

    post {
        always {
            echo "Pipeline finished. Clean up or send notifications here."
        }
        failure {
            echo "Pipeline failed! Notify the team."
        }
        success {
            echo "Pipeline succeeded!"
        }
    }
}
